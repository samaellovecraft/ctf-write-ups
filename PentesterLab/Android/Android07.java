
import java.security.MessageDigest;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

class Android07 {

    public static void main(String[] args) {
        String encryptedString = "ED1nf3uLW4Hkwr1aGw+NpN5sgcRMPCFuk0XgtW181m4o6d0Ml3D/j6h1NSyOh4dbcGsbK6rcZOUyzHxWVb4QkA";

        // Brute-force loop for all 4-digit PINs (0000 to 9999)
        for (int i = 0; i <= 9999; i++) {
            String decryptionKey = String.format("%04d", i); // format key to be 4 digits (e.g., "0001")
            String decryptedString = decrypt(encryptedString, decryptionKey);

            if (!decryptedString.isEmpty() && isPrintable(decryptedString)) {
                System.out.println("The correct PIN is: " + decryptionKey);
                System.out.println("The key is: " + decryptedString);
                break;
            }
        }
    }

    public static String decrypt(String encryptedString, String decryptionKey) {
        try {
            // Decode the Base64 encoded string
            byte[] cipherData = Base64.getDecoder().decode(encryptedString);

            // Extract the initialization vector (first 16 bytes)
            byte[] iv = new byte[16];
            System.arraycopy(cipherData, 0, iv, 0, iv.length);
            IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);

            // Extract the encrypted message (remaining bytes)
            int cipherTextLength = cipherData.length - 16;
            byte[] cipherText = new byte[cipherTextLength];
            System.arraycopy(cipherData, 16, cipherText, 0, cipherTextLength);

            // Create MD5 hash of the decryption key
            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
            byte[] keyBytes = new byte[16];
            messageDigest.update(decryptionKey.getBytes("UTF-8"));
            System.arraycopy(messageDigest.digest(), 0, keyBytes, 0, keyBytes.length);

            // Create SecretKeySpec using the decryption key hash
            SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, "AES");

            // Initialize the cipher for decryption
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec);

            // Decrypt the string
            byte[] decryptedBytes = cipher.doFinal(cipherText);

            return new String(decryptedBytes);
        } catch (Exception exception) {
            return "";
        }
    }

    // Utility method to check if a string contains only printable characters
    public static boolean isPrintable(String str) {
        for (char c : str.toCharArray()) {
            if (c < 32 || c > 126) { // ASCII printable range
                return false;
            }
        }
        return true;
    }
}
